import logging
import os
import time
from datetime import datetime
from typing import Dict, List

from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

from config import TELEGRAM_TOKEN, PHOTO_GROUPING_TIMEOUT
from ocr_processor import OCRProcessor
from excel_generator import ExcelGenerator
from training_data_collector import TrainingDataCollector

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class NakladniBot:
    def __init__(self):
        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ–æ—Ç–æ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ
        self.pending_photos: Dict[int, Dict] = {}
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        self.photos_dir = "nakladni_photos"
        if not os.path.exists(self.photos_dir):
            os.makedirs(self.photos_dir)
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {self.photos_dir}")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ OCR —Ç–∞ Excel –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        self.ocr_processor = OCRProcessor()
        self.excel_generator = ExcelGenerator()
        self.training_collector = TrainingDataCollector()
        
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó"""
        user_id = update.effective_user.id
        photo = update.message.photo[-1]  # –ù–∞–π–±—ñ–ª—å—à–∞ –≤–µ—Ä—Å—ñ—è —Ñ–æ—Ç–æ
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ
            file = await context.bot.get_file(photo.file_id)
            photo_bytes = await file.download_as_bytearray()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ –≤ –æ–∫—Ä–µ–º—ñ–π –ø–∞–ø—Ü—ñ
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            photo_filename = os.path.join(self.photos_dir, f"photo_{user_id}_{timestamp}.jpg")
            
            with open(photo_filename, 'wb') as f:
                f.write(photo_bytes)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —Ñ–æ—Ç–æ –≤—ñ–¥ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if user_id in self.pending_photos:
                # –î—Ä—É–≥–µ —Ñ–æ—Ç–æ - –æ–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞–∫–ª–∞–¥–Ω—É
                await self.process_nakladna(user_id, photo_filename, update, context)
            else:
                # –ü–µ—Ä—à–µ —Ñ–æ—Ç–æ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ —á–µ–∫–∞—î–º–æ –¥—Ä—É–≥–µ
                self.pending_photos[user_id] = {
                    'photo1': photo_filename,
                    'timestamp': time.time()
                }
                await update.message.reply_text("‚úÖ –§–æ—Ç–æ 1 –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n‚è≥ –û—á—ñ–∫—É—é —Ñ–æ—Ç–æ 2... (—É –≤–∞—Å —î 5 —Ö–≤–∏–ª–∏–Ω)")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è (—è–∫—â–æ job_queue –¥–æ—Å—Ç—É–ø–Ω–∏–π)
                if hasattr(context, 'job_queue') and context.job_queue:
                    context.job_queue.run_once(
                        self.cleanup_pending_photo, 
                        PHOTO_GROUPING_TIMEOUT, 
                        data=user_id
                    )
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    async def process_nakladna(self, user_id: int, photo2_filename: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤–Ω–æ—ó –Ω–∞–∫–ª–∞–¥–Ω–æ—ó (2 —Ñ–æ—Ç–æ) –∑ OCR —Ç–∞ Excel"""
        try:
            photo1_filename = self.pending_photos[user_id]['photo1']
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
            await update.message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –Ω–∞–∫–ª–∞–¥–Ω—É... (—Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥)")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–±–∏–¥–≤–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ OCR
            invoice_data1 = self.ocr_processor.process_invoice(photo1_filename)
            invoice_data2 = self.ocr_processor.process_invoice(photo2_filename)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            self.save_raw_ocr_text(photo1_filename, invoice_data1['raw_text'])
            self.save_raw_ocr_text(photo2_filename, invoice_data2['raw_text'])
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            invoice_id = f"{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            combined_results = {
                'bakery_name': invoice_data1.get('bakery_name') or invoice_data2.get('bakery_name'),
                'products': invoice_data1.get('products', []) + invoice_data2.get('products', []),
                'total_quantity': invoice_data1.get('total_quantity', 0) + invoice_data2.get('total_quantity', 0),
                'total_amount': invoice_data1.get('total_amount', 0) + invoice_data2.get('total_amount', 0)
            }
            
            training_dir = self.training_collector.save_invoice_data(
                invoice_id, photo1_filename, photo2_filename,
                invoice_data1['raw_text'], invoice_data2['raw_text'],
                combined_results
            )
            
            # –û–±'—î–¥–Ω—É—î–º–æ –¥–∞–Ω—ñ –∑ –æ–±–æ—Ö —Ñ–æ—Ç–æ
            combined_products = combined_results['products']
            bakery_name = combined_results['bakery_name']
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª
            current_date = datetime.now().strftime("%d.%m")
            excel_filepath = self.excel_generator.create_excel(bakery_name, combined_products, current_date)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç
            report_filename = f"–ù–∞–∫–ª–∞–¥–Ω–∞_{current_date}.txt"
            with open(report_filename, 'w', encoding='utf-8') as f:
                f.write(f"–ù–ê–ö–õ–ê–î–ù–ê - {current_date}\n")
                f.write("=" * 50 + "\n")
                f.write(f"–ü–µ–∫–∞—Ä–Ω—è: {bakery_name or '–ù–µ–≤—ñ–¥–æ–º–∞'}\n")
                f.write(f"–§–æ—Ç–æ 1: {photo1_filename}\n")
                f.write(f"–§–æ—Ç–æ 2: {photo2_filename}\n")
                f.write(f"Excel —Ñ–∞–π–ª: {excel_filepath}\n")
                f.write(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {datetime.now().strftime('%H:%M:%S')}\n")
                f.write("=" * 50 + "\n")
                f.write(f"–ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {len(combined_products)}\n")
                f.write(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {sum(p.get('quantity', 0) for p in combined_products):.2f}\n")
                f.write(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {sum(p.get('total', 0) for p in combined_products):.2f}\n")
                f.write("=" * 50 + "\n")
                f.write("–°–ü–ò–°–û–ö –ü–†–û–î–£–ö–¢–Ü–í:\n")
                for i, product in enumerate(combined_products, 1):
                    f.write(f"{i}. {product.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–æ–¥—É–∫—Ç')} - "
                           f"{product.get('quantity', 0)} —à—Ç. - "
                           f"{product.get('total', 0):.2f} –≥—Ä–Ω.\n")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_message = (
                f"‚úÖ –ù–∞–∫–ª–∞–¥–Ω–∞ –æ–±—Ä–æ–±–ª–µ–Ω–∞!\n\n"
                f"üè™ –ü–µ–∫–∞—Ä–Ω—è: {bakery_name or '–ù–µ–≤—ñ–¥–æ–º–∞'}\n"
                f"üì¶ –ü—Ä–æ–¥—É–∫—Ç—ñ–≤: {len(combined_products)}\n"
                f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {sum(p.get('quantity', 0) for p in combined_products):.2f}\n"
                f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {sum(p.get('total', 0) for p in combined_products):.2f} –≥—Ä–Ω.\n\n"
                f"üìÑ –ó–≤—ñ—Ç: {report_filename}\n"
                f"üìä Excel: {os.path.basename(excel_filepath)}\n"
                f"üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ: {self.photos_dir}\n\n"
                f"üéØ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {training_dir}\n"
                f"üí° –î–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª manual_annotation.json"
            )
            
            await update.message.reply_text(result_message)
            
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            del self.pending_photos[user_id]
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó: {e}")
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n"
                "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–æ—Ç–æ —á—ñ—Ç–∫—ñ —Ç–∞ –º—ñ—Å—Ç—è—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö."
            )
    
    def save_raw_ocr_text(self, image_path: str, raw_text: List[str]):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç—É OCR –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        try:
            base_name = os.path.splitext(os.path.basename(image_path))[0]
            raw_text_filename = f"raw_text_{base_name}.txt"
            
            with open(raw_text_filename, 'w', encoding='utf-8') as f:
                f.write(f"–°–ò–†–ò–ô –¢–ï–ö–°–¢ OCR: {image_path}\n")
                f.write("=" * 50 + "\n")
                for i, text in enumerate(raw_text, 1):
                    f.write(f"{i:3d}. {text}\n")
            
            logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å–∏—Ä–∏–π —Ç–µ–∫—Å—Ç OCR: {raw_text_filename}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç—É: {e}")
    
    async def cleanup_pending_photo(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Ñ–æ—Ç–æ"""
        user_id = context.job.data
        if user_id in self.pending_photos:
            photo_filename = self.pending_photos[user_id]['photo1']
            self.cleanup_temp_files([photo_filename])
            del self.pending_photos[user_id]
            logger.info(f"–û—á–∏—â–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    def cleanup_temp_files(self, filenames: List[str]):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
        for filename in filenames:
            try:
                if os.path.exists(filename):
                    os.remove(filename)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É {filename}: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = NakladniBot()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –∑ job_queue
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.PHOTO, bot.handle_photo))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –∑ —Å–∏—Å—Ç–µ–º–æ—é —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è OCR!")
    logger.info("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö.")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 