import pandas as pd
import openpyxl
from openpyxl import load_workbook
from typing import Dict, List, Tuple
import logging

logger = logging.getLogger(__name__)

class BlankAnalyzer:
    def __init__(self, blank_file: str):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –±–ª–∞–Ω–∫–∞"""
        self.blank_file = blank_file
        self.structure = self.analyze_blank_structure()
    
    def analyze_blank_structure(self) -> Dict:
        """–ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–ª–∞–Ω–∫–∞"""
        try:
            workbook = load_workbook(self.blank_file)
            structure = {
                'sheets': [],
                'headers': {},
                'product_columns': {},
                'total_columns': {},
                'bakery_info': {}
            }
            
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                sheet_info = {
                    'name': sheet_name,
                    'headers': [],
                    'product_rows': [],
                    'total_rows': [],
                    'bakery_info_rows': []
                }
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫
                for row in range(1, sheet.max_row + 1):
                    row_data = []
                    for col in range(1, sheet.max_column + 1):
                        cell_value = sheet.cell(row=row, column=col).value
                        if cell_value:
                            row_data.append(str(cell_value).strip())
                    
                    if row_data:
                        # –®—É–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        if any(keyword in ' '.join(row_data).upper() for keyword in 
                               ['–ù–ê–ó–í–ê', '–ü–†–û–î–£–ö–¢', '–ö–Ü–õ–¨–ö–Ü–°–¢–¨', '–¶–Ü–ù–ê', '–°–£–ú–ê', '–†–ê–ó–û–ú']):
                            sheet_info['headers'].append({
                                'row': row,
                                'data': row_data
                            })
                        
                        # –®—É–∫–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ–∫–∞—Ä–Ω—é
                        if any(keyword in ' '.join(row_data).upper() for keyword in 
                               ['–ü–ï–ö–ê–†–ù–Ø', '–¢–û–í', '–ü–ü', '–§–û–ü', '–ü–†–û–î–ê–í–ï–¶–¨']):
                            sheet_info['bakery_info_rows'].append({
                                'row': row,
                                'data': row_data
                            })
                        
                        # –®—É–∫–∞—î–º–æ —Ä—è–¥–∫–∏ –∑ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–º—ñ—Å—Ç—è—Ç—å —Ü–∏—Ñ—Ä–∏)
                        if any(char.isdigit() for item in row_data for char in str(item)):
                            sheet_info['product_rows'].append({
                                'row': row,
                                'data': row_data
                            })
                        
                        # –®—É–∫–∞—î–º–æ –ø—ñ–¥—Å—É–º–∫–æ–≤—ñ —Ä—è–¥–∫–∏
                        if any(keyword in ' '.join(row_data).upper() for keyword in 
                               ['–†–ê–ó–û–ú', '–í–°–¨–û–ì–û', '–°–£–ú–ê', '–ü–Ü–î–°–£–ú–û–ö']):
                            sheet_info['total_rows'].append({
                                'row': row,
                                'data': row_data
                            })
                
                structure['sheets'].append(sheet_info)
            
            logger.info(f"–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –±–ª–∞–Ω–∫: {len(structure['sheets'])} –∞—Ä–∫—É—à—ñ–≤")
            return structure
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –±–ª–∞–Ω–∫–∞: {e}")
            return {}
    
    def get_expected_columns(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –∑ –±–ª–∞–Ω–∫–∞"""
        expected_columns = []
        
        for sheet in self.structure.get('sheets', []):
            for header in sheet.get('headers', []):
                for item in header['data']:
                    if any(keyword in item.upper() for keyword in 
                           ['–ù–ê–ó–í–ê', '–ü–†–û–î–£–ö–¢', '–ö–Ü–õ–¨–ö–Ü–°–¢–¨', '–¶–Ü–ù–ê', '–°–£–ú–ê', '–†–ê–ó–û–ú']):
                        expected_columns.append(item)
        
        return list(set(expected_columns))
    
    def get_bakery_name_patterns(self) -> List[str]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –¥–ª—è –Ω–∞–∑–≤ –ø–µ–∫–∞—Ä–µ–Ω—å –∑ –±–ª–∞–Ω–∫–∞"""
        patterns = []
        
        for sheet in self.structure.get('sheets', []):
            for row_info in sheet.get('bakery_info_rows', []):
                for item in row_info['data']:
                    if any(keyword in item.upper() for keyword in 
                           ['–ü–ï–ö–ê–†–ù–Ø', '–¢–û–í', '–ü–ü', '–§–û–ü']):
                        patterns.append(item)
        
        return list(set(patterns))
    
    def get_product_format_examples(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ñ–æ—Ä–º–∞—Ç—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ –±–ª–∞–Ω–∫–∞"""
        examples = []
        
        for sheet in self.structure.get('sheets', []):
            for row_info in sheet.get('product_rows', []):
                if len(row_info['data']) >= 3:  # –ú—ñ–Ω—ñ–º—É–º –Ω–∞–∑–≤–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —Ü—ñ–Ω–∞
                    example = {
                        'name': row_info['data'][0] if len(row_info['data']) > 0 else '',
                        'quantity': row_info['data'][1] if len(row_info['data']) > 1 else '',
                        'price': row_info['data'][2] if len(row_info['data']) > 2 else '',
                        'total': row_info['data'][3] if len(row_info['data']) > 3 else ''
                    }
                    examples.append(example)
        
        return examples
    
    def generate_ocr_patterns(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –¥–ª—è OCR –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–ª–∞–Ω–∫–∞"""
        patterns = {
            'bakery_name_patterns': self.get_bakery_name_patterns(),
            'product_patterns': [],
            'column_headers': self.get_expected_columns(),
            'examples': self.get_product_format_examples()
        }
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤
        for example in patterns['examples']:
            if example['name'] and example['quantity']:
                # –ü–∞—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü—ñ–Ω–∞
                if example['price']:
                    patterns['product_patterns'].append(
                        f"([–ê-–Ø–Ü–á–Ñ\\w\\s]+)\\s+(\\d+(?:[.,]\\d+)?)\\s+(\\d+(?:[.,]\\d+)?)"
                    )
                # –ü–∞—Ç–µ—Ä–Ω: –Ω–∞–∑–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                else:
                    patterns['product_patterns'].append(
                        f"([–ê-–Ø–Ü–á–Ñ\\w\\s]+)\\s+(\\d+(?:[.,]\\d+)?)"
                    )
        
        return patterns
    
    def print_analysis_report(self):
        """–í–∏–≤–µ–¥–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –∞–Ω–∞–ª—ñ–∑ –±–ª–∞–Ω–∫–∞"""
        print("üìã –ê–ù–ê–õ–Ü–ó –ë–õ–ê–ù–ö–ê –ù–ê–ö–õ–ê–î–ù–ò–•")
        print("=" * 50)
        
        print(f"üìÑ –§–∞–π–ª: {self.blank_file}")
        print(f"üìä –ê—Ä–∫—É—à—ñ–≤: {len(self.structure.get('sheets', []))}")
        
        for i, sheet in enumerate(self.structure.get('sheets', []), 1):
            print(f"\nüìã –ê—Ä–∫—É—à {i}: {sheet['name']}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–∫—ñ–≤: {len(sheet.get('headers', []))}")
            print(f"   –†—è–¥–∫—ñ–≤ –∑ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏: {len(sheet.get('product_rows', []))}")
            print(f"   –†—è–¥–∫—ñ–≤ –∑ —ñ–Ω—Ñ–æ –ø—Ä–æ –ø–µ–∫–∞—Ä–Ω—é: {len(sheet.get('bakery_info_rows', []))}")
            print(f"   –ü—ñ–¥—Å—É–º–∫–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤: {len(sheet.get('total_rows', []))}")
        
        patterns = self.generate_ocr_patterns()
        print(f"\nüéØ –ó–ù–ê–ô–î–ï–ù–Ü –ü–ê–¢–ï–†–ù–ò:")
        print(f"   –ù–∞–∑–≤–∏ –ø–µ–∫–∞—Ä–µ–Ω—å: {len(patterns['bakery_name_patterns'])}")
        print(f"   –ü–∞—Ç–µ—Ä–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {len(patterns['product_patterns'])}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫: {len(patterns['column_headers'])}")
        
        if patterns['examples']:
            print(f"\nüìù –ü–†–ò–ö–õ–ê–î–ò –§–û–†–ú–ê–¢–£:")
            for i, example in enumerate(patterns['examples'][:3], 1):
                print(f"   {i}. {example['name']} | {example['quantity']} | {example['price']} | {example['total']}")

def main():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –±–ª–∞–Ω–∫–∞"""
    blank_file = "–±–ª–∞–Ω–∫ –¥–ª—è –≤–∏–ø—ñ—á–∫–∏ –∑ –Ω–æ–≤–∏–Ω–∫–∞–º–∏.xlsx"
    
    if not os.path.exists(blank_file):
        print(f"‚ùå –§–∞–π–ª {blank_file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    
    analyzer = BlankAnalyzer(blank_file)
    analyzer.print_analysis_report()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ OCR
    patterns = analyzer.generate_ocr_patterns()
    
    with open('blank_patterns.json', 'w', encoding='utf-8') as f:
        json.dump(patterns, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ü–∞—Ç–µ—Ä–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ blank_patterns.json")

if __name__ == "__main__":
    import os
    import json
    main() 