#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö OCR
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
"""

import os
import json
from training_data_collector import TrainingDataCollector
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∞–Ω–∞–ª—ñ–∑—É"""
    collector = TrainingDataCollector()
    
    print("üîç –ê–ù–ê–õ–Ü–ó –¢–†–ï–ù–£–í–ê–õ–¨–ù–ò–• –î–ê–ù–ò–• OCR")
    print("=" * 50)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç
    report_file = collector.generate_training_report()
    
    if os.path.exists(report_file):
        print(f"üìä –ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {report_file}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–º—ñ—Å—Ç –∑–≤—ñ—Ç—É
        with open(report_file, 'r', encoding='utf-8') as f:
            content = f.read()
            print("\n" + content)
    else:
        print("‚ùå –ó–≤—ñ—Ç –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    print("\nüìÅ –°–¢–†–£–ö–¢–£–†–ê –¢–†–ï–ù–£–í–ê–õ–¨–ù–ò–• –î–ê–ù–ò–•:")
    print("-" * 30)
    
    training_dir = collector.training_dir
    if os.path.exists(training_dir):
        invoices = [item for item in os.listdir(training_dir) 
                   if os.path.isdir(os.path.join(training_dir, item)) 
                   and item.startswith("invoice_")]
        
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö: {len(invoices)}")
        
        for invoice in invoices[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10
            invoice_path = os.path.join(training_dir, invoice)
            annotation_file = os.path.join(invoice_path, "manual_annotation.json")
            
            if os.path.exists(annotation_file):
                try:
                    with open(annotation_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        bakery_name = data.get('bakery_name', {}).get('correct_name', '–ù–µ –∞–Ω–æ—Ç–æ–≤–∞–Ω–æ')
                        products_count = len(data.get('products', []))
                        print(f"  ‚Ä¢ {invoice}: {bakery_name} ({products_count} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤)")
                except:
                    print(f"  ‚Ä¢ {invoice}: –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∞–Ω–æ—Ç–∞—Ü—ñ—ó")
            else:
                print(f"  ‚Ä¢ {invoice}: –û—á—ñ–∫—É—î –∞–Ω–æ—Ç–∞—Ü—ñ—ó")
        
        if len(invoices) > 10:
            print(f"  ... —Ç–∞ —â–µ {len(invoices) - 10} –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö")
    else:
        print("–ü–∞–ø–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("-" * 20)
    print("1. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –±–æ—Ç—É –∫—ñ–ª—å–∫–∞ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö –¥–ª—è –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö")
    print("2. –í—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª–∏ manual_annotation.json –≤ –ø–∞–ø—Ü—ñ training_data")
    print("3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
    print("4. –ù–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–∫—Ä–∞—â—ñ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º OCR")

if __name__ == "__main__":
    main() 